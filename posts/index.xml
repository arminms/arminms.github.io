<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Armin Sobhani</title><link>https://arminms.github.io/posts/</link><description>Recent content in Posts on Armin Sobhani</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 27 Feb 2019 16:04:07 -0400</lastBuildDate><atom:link href="https://arminms.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Dipping into C++17 Parallel Algorithms with Intel's Parallel STL</title><link>https://arminms.github.io/posts/videos/parallel_stl/</link><pubDate>Wed, 27 Feb 2019 16:04:07 -0400</pubDate><guid>https://arminms.github.io/posts/videos/parallel_stl/</guid><description>This webinar was presented by me on February 27th, 2019 as a part of a series of regular biweekly webinars ran by SHARCNET. If you are programming or have already developed with C++, there is a good chance that you have used Standard Template Library (STL) containers and algorithms in your codes. In that case, you can easily boost the performance of your existing codes with parallel algorithms introduced in C++17.</description></item><item><title>Harnessing the Power of Heterogeneous Computing using Boost.Compute + OpenCL</title><link>https://arminms.github.io/posts/videos/boost_compute/</link><pubDate>Wed, 15 Aug 2018 16:04:07 -0400</pubDate><guid>https://arminms.github.io/posts/videos/boost_compute/</guid><description>This webinar was presented by me on August 15th, 2018 as a part of a series of regular biweekly webinars ran by SHARCNET. The Boost Compute library provides a C++ interface to multi-core CPU and GPGPU computing platforms based on OpenCL. It provides a high-level, STL-like API and is portable to a wide variety of parallel accelerators including GPUs, FPGAs, and multi-core CPUs. This seminar gives an overview of the library and demonstrates how to write and execute high-performance C++ applications on SHARCNET clusters.</description></item><item><title>Visual Studio Code – Your Next Coding Companion for Advanced Research Computing</title><link>https://arminms.github.io/posts/videos/vscode_1/</link><pubDate>Wed, 28 Feb 2018 16:04:07 -0400</pubDate><guid>https://arminms.github.io/posts/videos/vscode_1/</guid><description>This webinar was presented by me on February 28th, 2018 as a part of a series of regular biweekly webinars ran by SHARCNET. Visual Studio Code (vscode) is a free and open-source code editor developed by Microsoft for Windows, Linux, and macOS. It includes support for debugging, embedded Git version control, syntax highlighting, intelligent code completion, snippets, and code refactoring. It is also extensible and customizable, so users can install extensions to add new languages, themes, debuggers and change the editor’s keyboard shortcuts, and preferences.</description></item><item><title>Automating Software Build Process using CMake - Part II</title><link>https://arminms.github.io/posts/videos/cmake_2/</link><pubDate>Wed, 26 Apr 2017 16:04:07 -0400</pubDate><guid>https://arminms.github.io/posts/videos/cmake_2/</guid><description>This webinar was presented by me on April 26th, 2017 as a part of a series of regular biweekly webinars ran by SHARCNET. CMake is a cross-platform, free and open-source build system that allows you automatically build, test, verify, package and deploy software in a compiler-independent manner. In Part I of this seminar we introduced CMake and the first three steps of our tutorial:
Automating Software Build Process using CMake – Part I In Part II we will continue with more steps covering other techniques like adding options, correct way of finding Boost library, configuring header files, producing installation packages and so on.</description></item><item><title>Automating Software Build Process using CMake - Part I</title><link>https://arminms.github.io/posts/videos/cmake_1/</link><pubDate>Wed, 14 Sep 2016 16:04:07 -0400</pubDate><guid>https://arminms.github.io/posts/videos/cmake_1/</guid><description>This webinar was presented by me on September 14, 2016 as a part of a series of regular biweekly webinars ran by SHARCNET. CMake is a cross-platform, free and open-source build system that allows you automatically build, test, verify, package and deploy software in a compiler-independent manner. CMake was originally created in 1999 for the Insight Toolkit (ITK) funded by the US National Library of Medicine (NLM) as part of the Visible Human Project and over the past 17 years has become the most popular build tool for C/C++ especially in the field of scientific research (e.</description></item><item><title>Programming with Wt - A C++ library for developing stateful and highly interactive web applications</title><link>https://arminms.github.io/posts/videos/wt/</link><pubDate>Wed, 24 Jun 2015 16:04:07 -0400</pubDate><guid>https://arminms.github.io/posts/videos/wt/</guid><description>This webinar was presented by me on June 24th, 2015 as a part of a series of regular biweekly webinars ran by SHARCNET. If you need to expose a new HPC service or a brand new scientific methodology to outside community by developing a highly interactive web application but without gaining familiarity with ever-changing technologies such as HTML/XHTML, JavaScript, CSS, AJAX, CGI, DHTML, SVG/VML/Canvas, PHP, etc., this webinar is for you.</description></item></channel></rss>