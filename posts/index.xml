<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Armin Sobhani</title><link>https://armin.sobhani.me/posts/</link><description>Recent content in Posts on Armin Sobhani</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 20 Sep 2024 10:52:30 -0400</lastBuildDate><atom:link href="https://armin.sobhani.me/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>The Emergence of WebAssembly (Wasm) in Scientific Computing</title><link>https://armin.sobhani.me/posts/videos/gol2p/</link><pubDate>Fri, 20 Sep 2024 10:52:30 -0400</pubDate><guid>https://armin.sobhani.me/posts/videos/gol2p/</guid><description>&lt;h4 id="i-presented-this-webinar-on-august-7th-2024-as-a-part-of-a-series-of-weekly-compute-ontario-colloquiahttpswwwcomputeontariocatraining-colloquia">I presented this webinar on August 7th, 2024, as a part of a series of weekly &lt;a href="https://www.computeontario.ca/training-colloquia" target="_blank" rel="noopener">Compute Ontario Colloquia&lt;/a>.&lt;/h4>
&lt;hr>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/c4MZPuLog28?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video">&lt;/iframe>
&lt;/div>
&lt;hr>
&lt;p>Developed collaboratively by major browser vendors, including Mozilla, Google, Microsoft, and Apple, WebAssembly (Wasm) addresses the limitations of traditional web programming languages like JavaScript. But what makes it so compelling for scientists? First, Wasm allows code written in languages like C/C++, Fortran or Rust to be compiled into its instruction format and run directly in the browser, making it accessible to anyone without installation hassles and eliminating the need for external servers. Second, with Wasm, developers can recycle existing code with near-native performance but without the hassle of rewriting it in JavaScript. Join us as we explore how Wasm is reshaping scientific workflows and empowering researchers worldwide.&lt;/p></description></item><item><title>p2rng â€“ A C++ Parallel Random Number Generator Library for the Masses</title><link>https://armin.sobhani.me/posts/videos/p2rng/</link><pubDate>Mon, 23 Oct 2023 10:51:00 -0400</pubDate><guid>https://armin.sobhani.me/posts/videos/p2rng/</guid><description>&lt;h4 id="i-presented-this-webinar-on-october-18th-2023-as-a-part-of-a-series-of-weekly-compute-ontario-colloquiahttpswwwcomputeontariocatraining-colloquia">I presented this webinar on October 18th, 2023, as a part of a series of weekly &lt;a href="https://www.computeontario.ca/training-colloquia" target="_blank" rel="noopener">Compute Ontario Colloquia&lt;/a>.&lt;/h4>
&lt;hr>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/nyOH8nvHBss?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video">&lt;/iframe>
&lt;/div>
&lt;hr>
&lt;p>&lt;code>p2rng&lt;/code> (&lt;a href="https://github.com/arminms/p2rng" target="_blank" rel="noopener">https://github.com/arminms/p2rng&lt;/a>) is a modern header-only C++ library for parallel algorithmic (pseudo) random number generation supporting &lt;a href="https://www.openmp.org/" target="_blank" rel="noopener">&lt;code>OpenMP&lt;/code>&lt;/a>, &lt;a href="https://developer.nvidia.com/cuda-zone" target="_blank" rel="noopener">&lt;code>CUDA&lt;/code>&lt;/a>, &lt;a href="https://www.amd.com/en/graphics/servers-solutions-rocm" target="_blank" rel="noopener">&lt;code>ROCm&lt;/code>&lt;/a> and &lt;a href="https://www.intel.com/content/www/us/en/developer/tools/oneapi/overview.html" target="_blank" rel="noopener">&lt;code>oneAPI&lt;/code>&lt;/a>. Playing fair, mostly required for debugging and unit testing, is one of the unique features of &lt;code>p2rng&lt;/code>. That means using the same seed and distribution you always get the same sequence of random numbers on all supported platforms. &lt;code>p2rng&lt;/code> provides parallel versions of &lt;em>STL&lt;/em>â€™s &lt;code>std::generate()&lt;/code> and &lt;code>std::generate_n()&lt;/code> algorithms with the same interface.
In this seminar we first start with a quick review of preliminary concepts about algorithmic random number generators in general and parallelization techniques in particular. Then we continue with the standard way of generating random numbers with &lt;em>STL&lt;/em> algorithms and how we can turn them into parallel version using &lt;code>p2rng&lt;/code>.&lt;/p></description></item><item><title>CUDA, ROCm, oneAPI â€“ All for One or One for All?</title><link>https://armin.sobhani.me/posts/videos/one4all/</link><pubDate>Fri, 21 Apr 2023 16:04:07 -0400</pubDate><guid>https://armin.sobhani.me/posts/videos/one4all/</guid><description>&lt;h4 id="i-presented-this-webinar-on-april-19th-2023-as-a-part-of-a-series-of-weekly-compute-ontario-colloquiahttpswwwcomputeontariocatraining-colloquia">I presented this webinar on April 19th, 2023, as a part of a series of weekly &lt;a href="https://www.computeontario.ca/training-colloquia" target="_blank" rel="noopener">Compute Ontario Colloquia&lt;/a>.&lt;/h4>
&lt;hr>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/RYtdiOhrv0Q?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video">&lt;/iframe>
&lt;/div>
&lt;hr>
&lt;p>For a long time, CUDA was the platform of choice for developing applications running on NVIDIAâ€™s GPUs. That is starting to change in recent years with the introduction of AMDâ€™s ROCm and Intelâ€™s oneAPI which both support GPUs by other vendors. While ROCm targets both AMD and NVIDIA GPUs, using the recently released drivers by CodePlay, oneAPI applications can run on NVIDIA and AMD in addition to Intelâ€™s GPUs. The question this seminar is trying to answer is if in 2023 you want to start a project targeting GPUs, what would be your platform of choice? Should you go with one or all of them? Later in the seminar, a boilerplate framework named &lt;a href="https://github.com/arminms/one4all" target="_blank" rel="noopener">one4all&lt;/a> will be introduced that streamlines the process of developing applications targeting all the above platforms. Unit testing with Catch2 as well as benchmarking with Google benchmark are already supported by the framework.&lt;/p></description></item><item><title>Back to Black</title><link>https://armin.sobhani.me/posts/random/back_to_black/</link><pubDate>Mon, 27 Mar 2023 14:20:04 -0400</pubDate><guid>https://armin.sobhani.me/posts/random/back_to_black/</guid><description>&lt;p>Lately, I&amp;rsquo;ve been noticing there are more and more black strands among my now almost completely grey hair. I never asked anyone else&amp;rsquo;s opinion about it simply because my impression was that&amp;rsquo;s just my imagination. That all changed yesterday&amp;hellip;&lt;/p>
&lt;p>Yesterday, in my monthly routine haircut, as soon as my barber who is a very sharp (mentally and instrumentally) Asian lady started to trim my hair, completely to my surprise, asked me if I have noticed my hair is backing to black cause she can tell for sure it is! ðŸ˜²&lt;/p></description></item><item><title>Remote Development on Clusters with VSCode - Part II</title><link>https://armin.sobhani.me/posts/videos/vscode_remote_2/</link><pubDate>Wed, 07 Sep 2022 16:04:07 -0400</pubDate><guid>https://armin.sobhani.me/posts/videos/vscode_remote_2/</guid><description>&lt;h4 id="i-presented-this-webinar-on-september-7th-2022-as-a-part-of-a-series-of-regular-biweekly-general-interest-webinars-ran-by-sharcnethttpssharcnetca">I presented this webinar on September 7th, 2022 as a part of a series of regular biweekly General Interest Webinars ran by &lt;a href="https://sharcnet.ca" target="_blank" rel="noopener">SHARCNET&lt;/a>.&lt;/h4>
&lt;hr>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/CsgBGpampvc?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video">&lt;/iframe>
&lt;/div>
&lt;hr>
&lt;p>Visual Studio Code (VSCode) is a free and open-source code editor developed by Microsoft for Windows, Linux, and macOS. It includes support for debugging, embedded Git version control, syntax highlighting, intelligent code completion, snippets, and code refactoring. In Part I of this seminar we covered configuring SSH agent and config file, version controlling with external repositories, providing makefile and CMake support and remote debugging on compute nodes using the proxy jump method:&lt;/p></description></item><item><title>Remote Development on Clusters with VSCode - Part I</title><link>https://armin.sobhani.me/posts/videos/vscode_remote_1/</link><pubDate>Wed, 12 Jan 2022 16:04:07 -0400</pubDate><guid>https://armin.sobhani.me/posts/videos/vscode_remote_1/</guid><description>&lt;h4 id="i-presented-this-webinar-on-january-12th-2022-as-a-part-of-a-series-of-regular-biweekly-general-interest-webinars-ran-by-sharcnethttpssharcnetca">I presented this webinar on January 12th, 2022 as a part of a series of regular biweekly General Interest Webinars ran by &lt;a href="https://sharcnet.ca" target="_blank" rel="noopener">SHARCNET&lt;/a>.&lt;/h4>
&lt;hr>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/u9k6HikDyqk?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video">&lt;/iframe>
&lt;/div>
&lt;hr>
&lt;p>Visual Studio Code (VSCode) is a free and open-source code editor developed by Microsoft for Windows, Linux, and macOS. It includes support for debugging, embedded Git version control, syntax highlighting, intelligent code completion, snippets, and code refactoring. It is also extensible and customizable, so users can install extensions to add new languages, themes, debuggers and change the editor&amp;rsquo;s keyboard shortcuts, and preferences.&lt;/p></description></item><item><title>Scalable Memory Allocation for Parallel Algorithms</title><link>https://armin.sobhani.me/posts/videos/sma/</link><pubDate>Wed, 17 Mar 2021 16:04:07 -0400</pubDate><guid>https://armin.sobhani.me/posts/videos/sma/</guid><description>&lt;h4 id="i-presented-this-webinar-on-march-17-2021-as-a-part-of-a-series-of-regular-biweekly-general-interest-webinars-ran-by-sharcnethttpssharcnetca">I presented this webinar on March 17, 2021 as a part of a series of regular biweekly General Interest Webinars ran by &lt;a href="https://sharcnet.ca" target="_blank" rel="noopener">SHARCNET&lt;/a>.&lt;/h4>
&lt;hr>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/1UGwixrLQGU?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video">&lt;/iframe>
&lt;/div>
&lt;hr>
&lt;p>In a multithreaded C/C++ program, using standard non-threaded allocators, memory allocation can become a bottleneck. That is firstly caused by thread competition for a lock on a shared global heap, and secondly for caching effects. Programs that run this way are not scalable and may slow down as the number of cores increases. Scalable memory allocators such as Intelâ€™s TBB allocators, FreeBSDâ€™s jemalloc and Googleâ€™s TCMalloc solve this problem by providing various optimizations such as per-CPU caches, thread-private heaps, sized deletes and fast/slow path improvements. You can easily gain a 20-30% performance improvement for parallel sections and even 4X in extreme cases by simply relinking with a scalable memory allocator. This webinar will tell you all about these allocators, with a live session running some benchmarks at the end. Materials presented during the live session are available on &lt;a href="https://github.com/arminms/scalable_allocators" target="_blank" rel="noopener">GitHub&lt;/a>.&lt;/p></description></item><item><title>How to Use C++ Parallel Algorithms in a Distributed Memory Setup (i.e. MPI)</title><link>https://armin.sobhani.me/posts/videos/pgas/</link><pubDate>Wed, 29 Jul 2020 16:04:07 -0400</pubDate><guid>https://armin.sobhani.me/posts/videos/pgas/</guid><description>&lt;h4 id="i-presented-this-webinar-on-july-29th-2020-as-a-part-of-a-series-of-regular-biweekly-general-interest-webinars-ran-by-sharcnethttpssharcnetca">I presented this webinar on July 29th, 2020 as a part of a series of regular biweekly General Interest Webinars ran by &lt;a href="https://sharcnet.ca" target="_blank" rel="noopener">SHARCNET&lt;/a>.&lt;/h4>
&lt;hr>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/H1LGxHN7Bqk?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video">&lt;/iframe>
&lt;/div>
&lt;hr>
&lt;p>Last year and earlier this year, SHARCNET presented two webinars introducing C++17 parallel algorithms
(&lt;a href="https://youtu.be/BQpp8SaIrgE" target="_blank" rel="noopener">first webinar&lt;/a>; &lt;a href="https://youtu.be/yU645WpDcuM" target="_blank" rel="noopener">second webinar&lt;/a>).
There was an interesting frequently asked question: is it possible to use them in an MPI setup? This seminar tries to address that question. First, there will be a very short intro to C++17 parallel algorithms followed by an overview of Partitioned Global Address Space (PGAS) parallel programming model. Then, &lt;a href="http://www.dash-project.org/" target="_blank" rel="noopener">DASH C++ template library&lt;/a> will be introduced. A live demonstration of installing and building programs with DASH concludes the webinar. You can find material presented during the live session on &lt;a href="https://github.com/arminms/dash-tutorial" target="_blank" rel="noopener">GitHub&lt;/a>.&lt;/p></description></item><item><title>Dipping into C++17 Parallel Algorithms with Intel's Parallel STL</title><link>https://armin.sobhani.me/posts/videos/parallel_stl/</link><pubDate>Wed, 27 Feb 2019 16:04:07 -0400</pubDate><guid>https://armin.sobhani.me/posts/videos/parallel_stl/</guid><description>&lt;h4 id="i-presented-this-webinar-on-february-27th-2019-as-a-part-of-a-series-of-regular-biweekly-general-interest-webinars-ran-by-sharcnethttpssharcnetca">I presented this webinar on February 27th, 2019 as a part of a series of regular biweekly General Interest Webinars ran by &lt;a href="https://sharcnet.ca" target="_blank" rel="noopener">SHARCNET&lt;/a>.&lt;/h4>
&lt;hr>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/yU645WpDcuM?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video">&lt;/iframe>
&lt;/div>
&lt;hr>
&lt;p>If you are programming or have already developed with C++, there is a good chance that you have used Standard Template Library (STL) containers and algorithms in your codes. In that case, you can easily boost the performance of your existing codes with parallel algorithms introduced in C++17. The good news is you do not have to wait until the support for the parallel algorithm is added to the C++ compiler of your choice. The Intelâ€™s Parallel STL is a fairly complete implementation of the C++ standard library algorithms with support for execution policies, as specified in ISO/IEC 14882:2017 standard, AKA C++17. It is a standalone header-only library available for free on GitHub (&lt;a href="https://github.com/intel/parallelstl%29" target="_blank" rel="noopener">https://github.com/intel/parallelstl)&lt;/a>. It can work with any C++11 compiler that works with Intelâ€™s Threading Building Blocks (TBB), which is also available for free at &lt;a href="https://www.threadingbuildingblocks.org/" target="_blank" rel="noopener">https://www.threadingbuildingblocks.org/&lt;/a>. In addition, if you want to use non-standard vectorization (unsequenced policies), your compiler should support OpenMP 4.0 SIMD constructs. Intel have offered to donate their implementation to both GCC and Clang.&lt;/p></description></item><item><title>Harnessing the Power of Heterogeneous Computing using Boost.Compute + OpenCL</title><link>https://armin.sobhani.me/posts/videos/boost_compute/</link><pubDate>Wed, 15 Aug 2018 16:04:07 -0400</pubDate><guid>https://armin.sobhani.me/posts/videos/boost_compute/</guid><description>&lt;h4 id="i-presented-this-webinar-on-august-15th-2018-as-a-part-of-a-series-of-regular-biweekly-general-interest-webinars-ran-by-sharcnethttpssharcnetca">I presented this webinar on August 15th, 2018 as a part of a series of regular biweekly General Interest Webinars ran by &lt;a href="https://sharcnet.ca" target="_blank" rel="noopener">SHARCNET&lt;/a>.&lt;/h4>
&lt;hr>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/OWzCJn7WMKI?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video">&lt;/iframe>
&lt;/div>
&lt;hr>
&lt;p>The Boost Compute library provides a C++ interface to multi-core CPU and GPGPU computing platforms based on OpenCL. It provides a high-level, STL-like API and is portable to a wide variety of parallel accelerators including GPUs, FPGAs, and multi-core CPUs. This seminar gives an overview of the library and demonstrates how to write and execute high-performance C++ applications on SHARCNET clusters.&lt;/p></description></item><item><title>Visual Studio Code â€“ Your Next Coding Companion for Advanced Research Computing</title><link>https://armin.sobhani.me/posts/videos/vscode_1/</link><pubDate>Wed, 28 Feb 2018 16:04:07 -0400</pubDate><guid>https://armin.sobhani.me/posts/videos/vscode_1/</guid><description>&lt;h4 id="i-presented-this-webinar-on-february-28th-2018-as-a-part-of-a-series-of-regular-biweekly-general-interest-webinars-ran-by-sharcnethttpssharcnetca">I presented this webinar on February 28th, 2018 as a part of a series of regular biweekly General Interest Webinars ran by &lt;a href="https://sharcnet.ca" target="_blank" rel="noopener">SHARCNET&lt;/a>.&lt;/h4>
&lt;hr>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/aR2L-UVmNXA?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video">&lt;/iframe>
&lt;/div>
&lt;hr>
&lt;p>Visual Studio Code (vscode) is a free and open-source code editor developed by Microsoft for Windows, Linux, and macOS. It includes support for debugging, embedded Git version control, syntax highlighting, intelligent code completion, snippets, and code refactoring. It is also extensible and customizable, so users can install extensions to add new languages, themes, debuggers and change the editorâ€™s keyboard shortcuts, and preferences.&lt;/p></description></item><item><title>Automating Software Build Process using CMake - Part II</title><link>https://armin.sobhani.me/posts/videos/cmake_2/</link><pubDate>Wed, 26 Apr 2017 16:04:07 -0400</pubDate><guid>https://armin.sobhani.me/posts/videos/cmake_2/</guid><description>&lt;h4 id="i-presented-this-webinar-on-april-26th-2017-as-a-part-of-a-series-of-regular-biweekly-general-interest-webinars-ran-by-sharcnethttpssharcnetca">I presented this webinar on April 26th, 2017 as a part of a series of regular biweekly General Interest Webinars ran by &lt;a href="https://sharcnet.ca" target="_blank" rel="noopener">SHARCNET&lt;/a>.&lt;/h4>
&lt;hr>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/Tsd6bAW8uLg?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video">&lt;/iframe>
&lt;/div>
&lt;hr>
&lt;p>CMake is a cross-platform, free and open-source build system that allows you automatically build, test, verify, package and deploy software in a compiler-independent manner. In Part I of this seminar we introduced CMake and the first three steps of our tutorial:&lt;/p></description></item><item><title>Automating Software Build Process using CMake - Part I</title><link>https://armin.sobhani.me/posts/videos/cmake_1/</link><pubDate>Wed, 14 Sep 2016 16:04:07 -0400</pubDate><guid>https://armin.sobhani.me/posts/videos/cmake_1/</guid><description>&lt;h4 id="i-presented-this-webinar-on-september-14-2016-as-a-part-of-a-series-of-regular-biweekly-general-interest-webinars-ran-by-sharcnethttpssharcnetca">I presented this webinar on September 14, 2016 as a part of a series of regular biweekly General Interest Webinars ran by &lt;a href="https://sharcnet.ca" target="_blank" rel="noopener">SHARCNET&lt;/a>.&lt;/h4>
&lt;hr>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/7wxzoAdZcKE?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video">&lt;/iframe>
&lt;/div>
&lt;hr>
&lt;p>CMake is a cross-platform, free and open-source build system that allows you automatically build, test, verify, package and deploy software in a compiler-independent manner. CMake was originally created in 1999 for the Insight Toolkit (ITK) funded by the US National Library of Medicine (NLM) as part of the Visible Human Project and over the past 17 years has become the most popular build tool for C/C++ especially in the field of scientific research (e.g. medical computing, visualization, computer vision and HPC). Some notable applications that use CMake for their build process are: Qt, MySQL, Gromacs, Blender, OpenCV, VTK and ParaView.&lt;/p></description></item><item><title>Programming with Wt - A C++ library for developing stateful and highly interactive web applications</title><link>https://armin.sobhani.me/posts/videos/wt/</link><pubDate>Wed, 24 Jun 2015 16:04:07 -0400</pubDate><guid>https://armin.sobhani.me/posts/videos/wt/</guid><description>&lt;h4 id="i-presented-this-webinar-on-june-24th-2015-as-a-part-of-a-series-of-regular-biweekly-general-interest-webinars-ran-by-sharcnethttpssharcnetca">I presented this webinar on June 24th, 2015 as a part of a series of regular biweekly General Interest Webinars ran by &lt;a href="https://sharcnet.ca" target="_blank" rel="noopener">SHARCNET&lt;/a>.&lt;/h4>
&lt;hr>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/qDc_s8hy3cY?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video">&lt;/iframe>
&lt;/div>
&lt;hr>
&lt;p>If you need to expose a new HPC service or a brand new scientific methodology to outside community by developing a highly interactive web application but without gaining familiarity with ever-changing technologies such as HTML/XHTML, JavaScript, CSS, AJAX, CGI, DHTML, SVG/VML/Canvas, PHP, etc., this webinar is for you. Wt (pronounced &amp;lsquo;witty&amp;rsquo;) is a freely available (&lt;a href="http://www.webtoolkit.eu/" target="_blank" rel="noopener">http://www.webtoolkit.eu/&lt;/a>) widget-centric C++ library and application server for developing web applications that brings the desktop programming model to web application development. From a programmer&amp;rsquo;s perspective, the Wt API is similar to those offered by libraries such as Qt, GTK, wxWindows, and the like. However, instead of rendering widgets to Windows/X11 windows, Wt incrementally renders the widgets in web browsers. A web application developed with Wt is written in only one compiled language (C++), from which the library generates the necessary HTML/XHTML, JavaScript, CGI, or AJAX code. If available, Wt will maximally use JavaScript and AJAX, but applications developed using Wt will also function correctly when AJAX is not available, or when JavaScript is disabled, reverting to a plain HTML/CGI mechanism for communication between browser and server. Browser-side events such as button clicks, mouse movements, and drag-and-drop events are transparently converted into server-side events using Wt&amp;rsquo;s signal/slot mechanism. Being a native C++ library, web applications developed with Wt typically enjoy greater efficiency and a smaller footprint than Java or Ruby solutions. As such, Wt lends itself to devices where efficiency and footprint matters, like in embedded applications.&lt;/p></description></item></channel></rss>