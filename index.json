[{"categories":null,"contents":"I presented this webinar on October 18th, 2023, as a part of a series of weekly Compute Ontario Colloquia. p2rng (https://github.com/arminms/p2rng) is a modern header-only C++ library for parallel algorithmic (pseudo) random number generation supporting OpenMP, CUDA, ROCm and oneAPI. Playing fair, mostly required for debugging and unit testing, is one of the unique features of p2rng. That means using the same seed and distribution you always get the same sequence of random numbers on all supported platforms. p2rng provides parallel versions of STL‚Äôs std::generate() and std::generate_n() algorithms with the same interface. In this seminar we first start with a quick review of preliminary concepts about algorithmic random number generators in general and parallelization techniques in particular. Then we continue with the standard way of generating random numbers with STL algorithms and how we can turn them into parallel version using p2rng.\n","date":"October 23, 2023","hero":"/posts/videos/p2rng/images/PXL_20220718_233206312.jpg","permalink":"https://armin.sobhani.me/posts/videos/p2rng/","summary":"I presented this webinar on October 18th, 2023, as a part of a series of weekly Compute Ontario Colloquia. p2rng (https://github.com/arminms/p2rng) is a modern header-only C++ library for parallel algorithmic (pseudo) random number generation supporting OpenMP, CUDA, ROCm and oneAPI. Playing fair, mostly required for debugging and unit testing, is one of the unique features of p2rng. That means using the same seed and distribution you always get the same sequence of random numbers on all supported platforms.","tags":null,"title":"p2rng ‚Äì A C++ Parallel Random Number Generator Library for the Masses"},{"categories":null,"contents":"I presented this webinar on April 19th, 2023, as a part of a series of weekly Compute Ontario Colloquia. For a long time, CUDA was the platform of choice for developing applications running on NVIDIA‚Äôs GPUs. That is starting to change in recent years with the introduction of AMD‚Äôs ROCm and Intel‚Äôs oneAPI which both support GPUs by other vendors. While ROCm targets both AMD and NVIDIA GPUs, using the recently released drivers by CodePlay, oneAPI applications can run on NVIDIA and AMD in addition to Intel‚Äôs GPUs. The question this seminar is trying to answer is if in 2023 you want to start a project targeting GPUs, what would be your platform of choice? Should you go with one or all of them? Later in the seminar, a boilerplate framework named one4all will be introduced that streamlines the process of developing applications targeting all the above platforms. Unit testing with Catch2 as well as benchmarking with Google benchmark are already supported by the framework.\n","date":"April 21, 2023","hero":"/posts/videos/one4all/images/p1030224.jpg","permalink":"https://armin.sobhani.me/posts/videos/one4all/","summary":"I presented this webinar on April 19th, 2023, as a part of a series of weekly Compute Ontario Colloquia. For a long time, CUDA was the platform of choice for developing applications running on NVIDIA‚Äôs GPUs. That is starting to change in recent years with the introduction of AMD‚Äôs ROCm and Intel‚Äôs oneAPI which both support GPUs by other vendors. While ROCm targets both AMD and NVIDIA GPUs, using the recently released drivers by CodePlay, oneAPI applications can run on NVIDIA and AMD in addition to Intel‚Äôs GPUs.","tags":null,"title":"CUDA, ROCm, oneAPI ‚Äì All for One or One for All?"},{"categories":null,"contents":"Lately, I\u0026rsquo;ve been noticing there are more and more black strands among my now almost completely grey hair. I never asked anyone else\u0026rsquo;s opinion about it simply because my impression was that\u0026rsquo;s just my imagination. That all changed yesterday\u0026hellip;\nYesterday, in my monthly routine haircut, as soon as my barber who is a very sharp (mentally and instrumentally) Asian lady started to trim my hair, completely to my surprise, asked me if I have noticed my hair is backing to black cause she can tell for sure it is! üò≤\nI said ‚ÄúAs a matter of fact, yes‚Ä¶‚Äù but before I could even finish she continued by saying it‚Äôs happening to about 10-15 of her regular customers!!! ü§Ø She genuinely believed it‚Äôs one of the side effects of covid vaccine.\nTrue or false, that‚Äôs an interesting observation. Have you had such an experience with your hair color recently?\nWhether it‚Äôs something that happens to people with certain ethnicity or traits and if it‚Äôs gonna last, are among many questions that remained to be answered as the time goes by.\nTop image: Barber cutting hair with comb by shixart1985\n","date":"March 27, 2023","hero":"/posts/random/back_to_black/images/48968346138_c788441364_k.jpg","permalink":"https://armin.sobhani.me/posts/random/back_to_black/","summary":"Lately, I\u0026rsquo;ve been noticing there are more and more black strands among my now almost completely grey hair. I never asked anyone else\u0026rsquo;s opinion about it simply because my impression was that\u0026rsquo;s just my imagination. That all changed yesterday\u0026hellip;\nYesterday, in my monthly routine haircut, as soon as my barber who is a very sharp (mentally and instrumentally) Asian lady started to trim my hair, completely to my surprise, asked me if I have noticed my hair is backing to black cause she can tell for sure it is!","tags":null,"title":"Back to Black"},{"categories":null,"contents":"I presented this webinar on September 7th, 2022 as a part of a series of regular biweekly General Interest Webinars ran by SHARCNET. Visual Studio Code (VSCode) is a free and open-source code editor developed by Microsoft for Windows, Linux, and macOS. It includes support for debugging, embedded Git version control, syntax highlighting, intelligent code completion, snippets, and code refactoring. In Part I of this seminar we covered configuring SSH agent and config file, version controlling with external repositories, providing makefile and CMake support and remote debugging on compute nodes using the proxy jump method:\nRemote Development on Clusters with VSCode - Part I In Part II, we will continue with remote debugging using the SSH tunneling method and remote debugging CUDA codes using NSight VSCode extension.\nThe materials presented during the live session are available on SHARCNET GitHub account.\n","date":"September 7, 2022","hero":"/posts/videos/vscode_remote_2/images/p1000129.jpg","permalink":"https://armin.sobhani.me/posts/videos/vscode_remote_2/","summary":"I presented this webinar on September 7th, 2022 as a part of a series of regular biweekly General Interest Webinars ran by SHARCNET. Visual Studio Code (VSCode) is a free and open-source code editor developed by Microsoft for Windows, Linux, and macOS. It includes support for debugging, embedded Git version control, syntax highlighting, intelligent code completion, snippets, and code refactoring. In Part I of this seminar we covered configuring SSH agent and config file, version controlling with external repositories, providing makefile and CMake support and remote debugging on compute nodes using the proxy jump method:","tags":null,"title":"Remote Development on Clusters with VSCode - Part II"},{"categories":null,"contents":"I presented this webinar on January 12th, 2022 as a part of a series of regular biweekly General Interest Webinars ran by SHARCNET. Visual Studio Code (VSCode) is a free and open-source code editor developed by Microsoft for Windows, Linux, and macOS. It includes support for debugging, embedded Git version control, syntax highlighting, intelligent code completion, snippets, and code refactoring. It is also extensible and customizable, so users can install extensions to add new languages, themes, debuggers and change the editor\u0026rsquo;s keyboard shortcuts, and preferences.\nIn this webinar we will focus on how to do remote development on HPC clusters effectively. Including but not limited to configuring SSH agent and config file, version controlling with external repositories, providing makefile and CMake support, remote debugging on compute nodes, etc. The materials presented during the live session are available on SHARCNET GitHub account.\nRemote Development on Clusters with VSCode - Part II ","date":"January 12, 2022","hero":"/posts/videos/vscode_remote_1/images/p1000134.jpg","permalink":"https://armin.sobhani.me/posts/videos/vscode_remote_1/","summary":"I presented this webinar on January 12th, 2022 as a part of a series of regular biweekly General Interest Webinars ran by SHARCNET. Visual Studio Code (VSCode) is a free and open-source code editor developed by Microsoft for Windows, Linux, and macOS. It includes support for debugging, embedded Git version control, syntax highlighting, intelligent code completion, snippets, and code refactoring. It is also extensible and customizable, so users can install extensions to add new languages, themes, debuggers and change the editor\u0026rsquo;s keyboard shortcuts, and preferences.","tags":null,"title":"Remote Development on Clusters with VSCode - Part I"},{"categories":null,"contents":"I presented this webinar on March 17, 2021 as a part of a series of regular biweekly General Interest Webinars ran by SHARCNET. In a multithreaded C/C++ program, using standard non-threaded allocators, memory allocation can become a bottleneck. That is firstly caused by thread competition for a lock on a shared global heap, and secondly for caching effects. Programs that run this way are not scalable and may slow down as the number of cores increases. Scalable memory allocators such as Intel‚Äôs TBB allocators, FreeBSD‚Äôs jemalloc and Google‚Äôs TCMalloc solve this problem by providing various optimizations such as per-CPU caches, thread-private heaps, sized deletes and fast/slow path improvements. You can easily gain a 20-30% performance improvement for parallel sections and even 4X in extreme cases by simply relinking with a scalable memory allocator. This webinar will tell you all about these allocators, with a live session running some benchmarks at the end. Materials presented during the live session are available on GitHub.\n","date":"March 17, 2021","hero":"/posts/videos/sma/images/p1000123.jpg","permalink":"https://armin.sobhani.me/posts/videos/sma/","summary":"I presented this webinar on March 17, 2021 as a part of a series of regular biweekly General Interest Webinars ran by SHARCNET. In a multithreaded C/C++ program, using standard non-threaded allocators, memory allocation can become a bottleneck. That is firstly caused by thread competition for a lock on a shared global heap, and secondly for caching effects. Programs that run this way are not scalable and may slow down as the number of cores increases.","tags":null,"title":"Scalable Memory Allocation for Parallel Algorithms"},{"categories":null,"contents":"I presented this webinar on July 29th, 2020 as a part of a series of regular biweekly General Interest Webinars ran by SHARCNET. Last year and earlier this year, SHARCNET presented two webinars introducing C++17 parallel algorithms (first webinar; second webinar). There was an interesting frequently asked question: is it possible to use them in an MPI setup? This seminar tries to address that question. First, there will be a very short intro to C++17 parallel algorithms followed by an overview of Partitioned Global Address Space (PGAS) parallel programming model. Then, DASH C++ template library will be introduced. A live demonstration of installing and building programs with DASH concludes the webinar. You can find material presented during the live session on GitHub.\n","date":"July 29, 2020","hero":"/posts/videos/pgas/images/p1010380.jpg","permalink":"https://armin.sobhani.me/posts/videos/pgas/","summary":"I presented this webinar on July 29th, 2020 as a part of a series of regular biweekly General Interest Webinars ran by SHARCNET. Last year and earlier this year, SHARCNET presented two webinars introducing C++17 parallel algorithms (first webinar; second webinar). There was an interesting frequently asked question: is it possible to use them in an MPI setup? This seminar tries to address that question. First, there will be a very short intro to C++17 parallel algorithms followed by an overview of Partitioned Global Address Space (PGAS) parallel programming model.","tags":null,"title":"How to Use C++ Parallel Algorithms in a Distributed Memory Setup (i.e. MPI)"},{"categories":null,"contents":"I presented this webinar on February 27th, 2019 as a part of a series of regular biweekly General Interest Webinars ran by SHARCNET. If you are programming or have already developed with C++, there is a good chance that you have used Standard Template Library (STL) containers and algorithms in your codes. In that case, you can easily boost the performance of your existing codes with parallel algorithms introduced in C++17. The good news is you do not have to wait until the support for the parallel algorithm is added to the C++ compiler of your choice. The Intel‚Äôs Parallel STL is a fairly complete implementation of the C++ standard library algorithms with support for execution policies, as specified in ISO/IEC 14882:2017 standard, AKA C++17. It is a standalone header-only library available for free on GitHub (https://github.com/intel/parallelstl). It can work with any C++11 compiler that works with Intel‚Äôs Threading Building Blocks (TBB), which is also available for free at https://www.threadingbuildingblocks.org/. In addition, if you want to use non-standard vectorization (unsequenced policies), your compiler should support OpenMP 4.0 SIMD constructs. Intel have offered to donate their implementation to both GCC and Clang.\nThis talk gives an overview of the C++17 execution policies, demonstrates how to use the Intel‚Äôs Parallel STL library on SHARCNET‚Äôs Graham cluster, and concludes with some benchmark results.\nCode examples: https://git.sharcnet.ca/asobhani/parallelstl_tutorial\n","date":"February 27, 2019","hero":"/posts/videos/parallel_stl/images/p1010379.jpg","permalink":"https://armin.sobhani.me/posts/videos/parallel_stl/","summary":"I presented this webinar on February 27th, 2019 as a part of a series of regular biweekly General Interest Webinars ran by SHARCNET. If you are programming or have already developed with C++, there is a good chance that you have used Standard Template Library (STL) containers and algorithms in your codes. In that case, you can easily boost the performance of your existing codes with parallel algorithms introduced in C++17.","tags":null,"title":"Dipping into C++17 Parallel Algorithms with Intel's Parallel STL"},{"categories":null,"contents":"I presented this webinar on August 15th, 2018 as a part of a series of regular biweekly General Interest Webinars ran by SHARCNET. The Boost Compute library provides a C++ interface to multi-core CPU and GPGPU computing platforms based on OpenCL. It provides a high-level, STL-like API and is portable to a wide variety of parallel accelerators including GPUs, FPGAs, and multi-core CPUs. This seminar gives an overview of the library and demonstrates how to write and execute high-performance C++ applications on SHARCNET clusters.\n","date":"August 15, 2018","hero":"/posts/videos/boost_compute/images/p1010364.jpg","permalink":"https://armin.sobhani.me/posts/videos/boost_compute/","summary":"I presented this webinar on August 15th, 2018 as a part of a series of regular biweekly General Interest Webinars ran by SHARCNET. The Boost Compute library provides a C++ interface to multi-core CPU and GPGPU computing platforms based on OpenCL. It provides a high-level, STL-like API and is portable to a wide variety of parallel accelerators including GPUs, FPGAs, and multi-core CPUs. This seminar gives an overview of the library and demonstrates how to write and execute high-performance C++ applications on SHARCNET clusters.","tags":null,"title":"Harnessing the Power of Heterogeneous Computing using Boost.Compute + OpenCL"},{"categories":null,"contents":"I presented this webinar on February 28th, 2018 as a part of a series of regular biweekly General Interest Webinars ran by SHARCNET. Visual Studio Code (vscode) is a free and open-source code editor developed by Microsoft for Windows, Linux, and macOS. It includes support for debugging, embedded Git version control, syntax highlighting, intelligent code completion, snippets, and code refactoring. It is also extensible and customizable, so users can install extensions to add new languages, themes, debuggers and change the editor‚Äôs keyboard shortcuts, and preferences.\nIn this seminar we focus on one compiled and one scripting language common in advanced research computing projects, namely C/C++ and Python, respectively. We show how to use the same CMake configuration we have developed in the previous talk to edit, version-control, build and debug our C/C++ codebase exactly the same way in vscode on different platforms (only Linux and Windows will be demonstrated). Then we show how to deal effectively with Python codes.\nSome knowledge of Git version control system, CMake build system, and Nix package manager is desirable but not mandatory. To that end, reviewing the following previous seminars before attending this one may be helpful:\nGit and SHARCNET Automating Software Build Process using CMake ‚Äì Part I Automating Software Build Process using CMake ‚Äì Part II Exploring a new approach to package management ","date":"February 28, 2018","hero":"/posts/videos/vscode_1/images/p1010356.jpg","permalink":"https://armin.sobhani.me/posts/videos/vscode_1/","summary":"I presented this webinar on February 28th, 2018 as a part of a series of regular biweekly General Interest Webinars ran by SHARCNET. Visual Studio Code (vscode) is a free and open-source code editor developed by Microsoft for Windows, Linux, and macOS. It includes support for debugging, embedded Git version control, syntax highlighting, intelligent code completion, snippets, and code refactoring. It is also extensible and customizable, so users can install extensions to add new languages, themes, debuggers and change the editor‚Äôs keyboard shortcuts, and preferences.","tags":null,"title":"Visual Studio Code ‚Äì Your Next Coding Companion for Advanced Research Computing"},{"categories":null,"contents":"I presented this webinar on April 26th, 2017 as a part of a series of regular biweekly General Interest Webinars ran by SHARCNET. CMake is a cross-platform, free and open-source build system that allows you automatically build, test, verify, package and deploy software in a compiler-independent manner. In Part I of this seminar we introduced CMake and the first three steps of our tutorial:\nAutomating Software Build Process using CMake ‚Äì Part I In Part II we will continue with more steps covering other techniques like adding options, correct way of finding Boost library, configuring header files, producing installation packages and so on. It is highly recommended to review the prior talk before attending this one.\n","date":"April 26, 2017","hero":"/posts/videos/cmake_2/images/p1010137.jpg","permalink":"https://armin.sobhani.me/posts/videos/cmake_2/","summary":"I presented this webinar on April 26th, 2017 as a part of a series of regular biweekly General Interest Webinars ran by SHARCNET. CMake is a cross-platform, free and open-source build system that allows you automatically build, test, verify, package and deploy software in a compiler-independent manner. In Part I of this seminar we introduced CMake and the first three steps of our tutorial:\nAutomating Software Build Process using CMake ‚Äì Part I In Part II we will continue with more steps covering other techniques like adding options, correct way of finding Boost library, configuring header files, producing installation packages and so on.","tags":null,"title":"Automating Software Build Process using CMake - Part II"},{"categories":null,"contents":"I presented this webinar on September 14, 2016 as a part of a series of regular biweekly General Interest Webinars ran by SHARCNET. CMake is a cross-platform, free and open-source build system that allows you automatically build, test, verify, package and deploy software in a compiler-independent manner. CMake was originally created in 1999 for the Insight Toolkit (ITK) funded by the US National Library of Medicine (NLM) as part of the Visible Human Project and over the past 17 years has become the most popular build tool for C/C++ especially in the field of scientific research (e.g. medical computing, visualization, computer vision and HPC). Some notable applications that use CMake for their build process are: Qt, MySQL, Gromacs, Blender, OpenCV, VTK and ParaView.\nCMake is designed to be used in conjunction with native build environments such as Unix Makefiles, Microsoft Visual Studio and Apple‚Äôs Xcode. The build process is controlled by creating one or more configuration files (called CMakeLists.txt files) in each source directory (including subdirectories) that make up a project. Each CMakeLists.txt consists of one or more commands. One of the key features of CMake is the ability to build a directory tree outside the source tree, hence, in case the build directory is removed, the source files remain unaffected. CMake can generate makefiles for many platforms and IDEs including Unix, Windows, Mac OS X, OS/2, MSVC, Unix Makefiles, Ninja, Cygwin, MinGW, NMake, Xcode, CodeBlocks, CodeLite, Eclipse CDT and even Sublime Text.\nThis talk will introduce CMake and go over the basics of using CMake on both user computers and SHARCNET systems to configure and build software. Basic steps of developing a working CMakeLists.txt for a sample software project will also be covered. Some programming experience is helpful but not mandatory.\n","date":"September 14, 2016","hero":"/posts/videos/cmake_1/images/p1010039.jpg","permalink":"https://armin.sobhani.me/posts/videos/cmake_1/","summary":"I presented this webinar on September 14, 2016 as a part of a series of regular biweekly General Interest Webinars ran by SHARCNET. CMake is a cross-platform, free and open-source build system that allows you automatically build, test, verify, package and deploy software in a compiler-independent manner. CMake was originally created in 1999 for the Insight Toolkit (ITK) funded by the US National Library of Medicine (NLM) as part of the Visible Human Project and over the past 17 years has become the most popular build tool for C/C++ especially in the field of scientific research (e.","tags":null,"title":"Automating Software Build Process using CMake - Part I"},{"categories":null,"contents":"I presented this webinar on June 24th, 2015 as a part of a series of regular biweekly General Interest Webinars ran by SHARCNET. If you need to expose a new HPC service or a brand new scientific methodology to outside community by developing a highly interactive web application but without gaining familiarity with ever-changing technologies such as HTML/XHTML, JavaScript, CSS, AJAX, CGI, DHTML, SVG/VML/Canvas, PHP, etc., this webinar is for you. Wt (pronounced \u0026lsquo;witty\u0026rsquo;) is a freely available (http://www.webtoolkit.eu/) widget-centric C++ library and application server for developing web applications that brings the desktop programming model to web application development. From a programmer\u0026rsquo;s perspective, the Wt API is similar to those offered by libraries such as Qt, GTK, wxWindows, and the like. However, instead of rendering widgets to Windows/X11 windows, Wt incrementally renders the widgets in web browsers. A web application developed with Wt is written in only one compiled language (C++), from which the library generates the necessary HTML/XHTML, JavaScript, CGI, or AJAX code. If available, Wt will maximally use JavaScript and AJAX, but applications developed using Wt will also function correctly when AJAX is not available, or when JavaScript is disabled, reverting to a plain HTML/CGI mechanism for communication between browser and server. Browser-side events such as button clicks, mouse movements, and drag-and-drop events are transparently converted into server-side events using Wt\u0026rsquo;s signal/slot mechanism. Being a native C++ library, web applications developed with Wt typically enjoy greater efficiency and a smaller footprint than Java or Ruby solutions. As such, Wt lends itself to devices where efficiency and footprint matters, like in embedded applications.\nIn this webinar, I will introduce Wt, demonstrate some interesting samples and go over the basics of making an interactive web application. The audience are expected to have some basic programming skills preferably in C++, but no experience in HTML, CSS or JavaScript is necessary.\n","date":"June 24, 2015","hero":"/posts/videos/wt/images/p1010038.jpg","permalink":"https://armin.sobhani.me/posts/videos/wt/","summary":"I presented this webinar on June 24th, 2015 as a part of a series of regular biweekly General Interest Webinars ran by SHARCNET. If you need to expose a new HPC service or a brand new scientific methodology to outside community by developing a highly interactive web application but without gaining familiarity with ever-changing technologies such as HTML/XHTML, JavaScript, CSS, AJAX, CGI, DHTML, SVG/VML/Canvas, PHP, etc., this webinar is for you.","tags":null,"title":"Programming with Wt - A C++ library for developing stateful and highly interactive web applications"}]